"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mineWithFailsRoute = exports.mineRoute = void 0;
const block_1 = require("../db/block");
const transaction_1 = require("../db/transaction");
let blockDB;
let transactionDB;
let connectionSettings;
function mineRoute(ctx) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (!blockDB || connectionSettings !== ctx.connection.client.connectionSettings.filename || !transactionDB) {
                blockDB = new block_1.BlockDB(ctx.connection);
                transactionDB = new transaction_1.TransactionDB(ctx.connection);
                connectionSettings = ctx.connection.client.connectionSettings.filename;
            }
            const txs = yield transactionDB.getUnminedTxs();
            const inc = +(((_a = ctx.params) === null || _a === void 0 ? void 0 : _a.qty) || 1);
            ctx.network.current = yield blockDB.mine(ctx.network.blocks, ctx.network.current, txs);
            ctx.network.height = ctx.network.height + inc;
            ctx.network.blocks = ctx.network.blocks + inc;
            yield transactionDB.mineTxs(ctx.network.current);
            ctx.body = ctx.network;
        }
        catch (error) {
            console.error({ error });
        }
    });
}
exports.mineRoute = mineRoute;
function mineWithFailsRoute(ctx) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (!blockDB || connectionSettings !== ctx.connection.client.connectionSettings.filename || !transactionDB) {
                blockDB = new block_1.BlockDB(ctx.connection);
                transactionDB = new transaction_1.TransactionDB(ctx.connection);
                connectionSettings = ctx.connection.client.connectionSettings.filename;
            }
            console.log(`Fails percentage set to ${ctx.fails * 100}%`);
            const txs = [];
            const unminedTxs = yield transactionDB.getUnminedTxs();
            unminedTxs.forEach((tx) => __awaiter(this, void 0, void 0, function* () {
                const fail = Math.random() < ctx.fails;
                if (fail) {
                    yield transactionDB.deleteById(tx);
                }
                else {
                    txs.push(tx);
                }
            }));
            const inc = +(((_a = ctx.params) === null || _a === void 0 ? void 0 : _a.qty) || 1);
            ctx.network.current = yield blockDB.mine(ctx.network.blocks, ctx.network.current, txs);
            ctx.network.height = ctx.network.height + inc;
            ctx.network.blocks = ctx.network.blocks + inc;
            yield transactionDB.mineTxs(ctx.network.current);
            ctx.body = ctx.network;
        }
        catch (error) {
            console.error({ error });
        }
    });
}
exports.mineWithFailsRoute = mineWithFailsRoute;
//# sourceMappingURL=mine.js.map