"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.txAccessMiddleware = void 0;
const transaction_1 = require("../db/transaction");
const pathRegex = /^\/?([a-z0-9-_]{43})/i;
let transactionDB;
let oldDbPath;
let connectionSettings;
function txAccessMiddleware(ctx, next) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (oldDbPath !== ctx.dbPath ||
                !transactionDB ||
                connectionSettings !== ctx.connection.client.connectionSettings.filename) {
                transactionDB = new transaction_1.TransactionDB(ctx.connection);
                oldDbPath = ctx.dbPath;
                connectionSettings = ctx.connection.client.connectionSettings.filename;
            }
            const rough = ctx.request.url.split('/tx')[1];
            const path = rough.match(pathRegex) || [];
            const txid = path.length > 1 ? path[1] : '';
            const metadata = yield transactionDB.getById(txid);
            ctx.logging.log(metadata);
            if (!metadata) {
                ctx.status = 404;
                ctx.body = 'Not Found';
                return;
            }
            // restrict tx in a bundle
            if ((metadata.bundledIn || '').length) {
                ctx.status = 404;
                ctx.body = 'Not Found';
                return;
            }
            yield next();
        }
        catch (error) {
            console.error({ error });
        }
    });
}
exports.txAccessMiddleware = txAccessMiddleware;
//# sourceMappingURL=transaction.js.map